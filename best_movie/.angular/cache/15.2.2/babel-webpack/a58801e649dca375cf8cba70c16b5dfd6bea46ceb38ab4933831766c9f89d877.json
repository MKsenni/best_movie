{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * An object of type TemplateStringsArray represents the literal part(s) of a\n * template literal. This function checks if a TemplateStringsArray object is\n * actually from a template literal.\n *\n * @param templateObj This contains the literal part of the template literal.\n * @param hasExprs If true, the input template may contain embedded expressions.\n * @param errorMsg The custom error message in case any checks fail.\n */\nexport function assertIsTemplateObject(templateObj, hasExprs, errorMsg) {\n  if (!Array.isArray(templateObj) || !Array.isArray(templateObj.raw) || !hasExprs && templateObj.length !== 1) {\n    throw new TypeError(errorMsg);\n  }\n}","map":{"version":3,"names":["assertIsTemplateObject","templateObj","hasExprs","errorMsg","Array","isArray","raw","length","TypeError"],"sources":["C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/safevalues/internals/string_literal.mjs"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * An object of type TemplateStringsArray represents the literal part(s) of a\n * template literal. This function checks if a TemplateStringsArray object is\n * actually from a template literal.\n *\n * @param templateObj This contains the literal part of the template literal.\n * @param hasExprs If true, the input template may contain embedded expressions.\n * @param errorMsg The custom error message in case any checks fail.\n */\nexport function assertIsTemplateObject(templateObj, hasExprs, errorMsg) {\n    if (!Array.isArray(templateObj) || !Array.isArray(templateObj.raw) ||\n        (!hasExprs && templateObj.length !== 1)) {\n        throw new TypeError(errorMsg);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,sBAAsB,CAACC,WAAW,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EACpE,IAAI,CAACC,KAAK,CAACC,OAAO,CAACJ,WAAW,CAAC,IAAI,CAACG,KAAK,CAACC,OAAO,CAACJ,WAAW,CAACK,GAAG,CAAC,IAC7D,CAACJ,QAAQ,IAAID,WAAW,CAACM,MAAM,KAAK,CAAE,EAAE;IACzC,MAAM,IAAIC,SAAS,CAACL,QAAQ,CAAC;EACjC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}