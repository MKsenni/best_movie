{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { createHtml, unwrapHtml } from '../internals/html_impl';\nimport { unwrapResourceUrl } from '../internals/resource_url_impl';\nimport { unwrapScript } from '../internals/script_impl';\n/**\n * Returns HTML-escaped text as a `SafeHtml` object.\n *\n * Available options:\n * - `preserveSpaces` turns every second consecutive space character into its\n * HTML entity representation (`&#160;`).\n * - `preserveNewlines` turns newline characters into breaks (`<br>`).\n * - `preserveTabs` wraps tab characters in a span with style=white-space:pre.\n */\nexport function htmlEscape(text, options = {}) {\n  let htmlEscapedString = htmlEscapeToString(text);\n  if (options.preserveSpaces) {\n    // Do this first to ensure we preserve spaces after newlines and tabs.\n    htmlEscapedString = htmlEscapedString.replace(/(^|[\\r\\n\\t ]) /g, '$1&#160;');\n  }\n  if (options.preserveNewlines) {\n    htmlEscapedString = htmlEscapedString.replace(/(\\r\\n|\\n|\\r)/g, '<br>');\n  }\n  if (options.preserveTabs) {\n    htmlEscapedString = htmlEscapedString.replace(/(\\t+)/g, '<span style=\"white-space:pre\">$1</span>');\n  }\n  return createHtml(htmlEscapedString);\n}\n/**\n * Creates a `SafeHtml` representing a script tag with inline script content.\n */\nexport function createScript(script, options = {}) {\n  const unwrappedScript = unwrapScript(script).toString();\n  let stringTag = `<script`;\n  if (options.id) {\n    stringTag += ` id=\"${htmlEscapeToString(options.id)}\"`;\n  }\n  if (options.nonce) {\n    stringTag += ` nonce=\"${htmlEscapeToString(options.nonce)}\"`;\n  }\n  if (options.type) {\n    stringTag += ` type=\"${htmlEscapeToString(options.type)}\"`;\n  }\n  stringTag += `>${unwrappedScript}\\x3c/script>`;\n  return createHtml(stringTag);\n}\n/**\n * Creates a `SafeHtml` representing a script tag with the src attribute.\n * This also supports CSP nonces and async loading.\n */\nexport function createScriptSrc(src, async, nonce) {\n  const unwrappedSrc = unwrapResourceUrl(src).toString();\n  let stringTag = `<script src=\"${htmlEscapeToString(unwrappedSrc)}\"`;\n  if (async) {\n    stringTag += ' async';\n  }\n  if (nonce) {\n    stringTag += ` nonce=\"${htmlEscapeToString(nonce)}\"`;\n  }\n  stringTag += '>\\x3c/script>';\n  return createHtml(stringTag);\n}\n/**\n * HTML-escapes the given text (`&`, `<`, `>`, `\"` and `'`).\n */\nfunction htmlEscapeToString(text) {\n  const escaped = text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n  return escaped;\n}\n/** Creates a `SafeHtml` value by concatenating multiple `SafeHtml`s. */\nexport function concatHtmls(htmls) {\n  return createHtml(htmls.map(unwrapHtml).join(''));\n}","map":{"version":3,"names":["createHtml","unwrapHtml","unwrapResourceUrl","unwrapScript","htmlEscape","text","options","htmlEscapedString","htmlEscapeToString","preserveSpaces","replace","preserveNewlines","preserveTabs","createScript","script","unwrappedScript","toString","stringTag","id","nonce","type","createScriptSrc","src","async","unwrappedSrc","escaped","concatHtmls","htmls","map","join"],"sources":["C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/safevalues/builders/html_builders.mjs"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { createHtml, unwrapHtml } from '../internals/html_impl';\nimport { unwrapResourceUrl } from '../internals/resource_url_impl';\nimport { unwrapScript } from '../internals/script_impl';\n/**\n * Returns HTML-escaped text as a `SafeHtml` object.\n *\n * Available options:\n * - `preserveSpaces` turns every second consecutive space character into its\n * HTML entity representation (`&#160;`).\n * - `preserveNewlines` turns newline characters into breaks (`<br>`).\n * - `preserveTabs` wraps tab characters in a span with style=white-space:pre.\n */\nexport function htmlEscape(text, options = {}) {\n    let htmlEscapedString = htmlEscapeToString(text);\n    if (options.preserveSpaces) {\n        // Do this first to ensure we preserve spaces after newlines and tabs.\n        htmlEscapedString =\n            htmlEscapedString.replace(/(^|[\\r\\n\\t ]) /g, '$1&#160;');\n    }\n    if (options.preserveNewlines) {\n        htmlEscapedString = htmlEscapedString.replace(/(\\r\\n|\\n|\\r)/g, '<br>');\n    }\n    if (options.preserveTabs) {\n        htmlEscapedString = htmlEscapedString.replace(/(\\t+)/g, '<span style=\"white-space:pre\">$1</span>');\n    }\n    return createHtml(htmlEscapedString);\n}\n/**\n * Creates a `SafeHtml` representing a script tag with inline script content.\n */\nexport function createScript(script, options = {}) {\n    const unwrappedScript = unwrapScript(script).toString();\n    let stringTag = `<script`;\n    if (options.id) {\n        stringTag += ` id=\"${htmlEscapeToString(options.id)}\"`;\n    }\n    if (options.nonce) {\n        stringTag += ` nonce=\"${htmlEscapeToString(options.nonce)}\"`;\n    }\n    if (options.type) {\n        stringTag += ` type=\"${htmlEscapeToString(options.type)}\"`;\n    }\n    stringTag += `>${unwrappedScript}\\x3c/script>`;\n    return createHtml(stringTag);\n}\n/**\n * Creates a `SafeHtml` representing a script tag with the src attribute.\n * This also supports CSP nonces and async loading.\n */\nexport function createScriptSrc(src, async, nonce) {\n    const unwrappedSrc = unwrapResourceUrl(src).toString();\n    let stringTag = `<script src=\"${htmlEscapeToString(unwrappedSrc)}\"`;\n    if (async) {\n        stringTag += ' async';\n    }\n    if (nonce) {\n        stringTag += ` nonce=\"${htmlEscapeToString(nonce)}\"`;\n    }\n    stringTag += '>\\x3c/script>';\n    return createHtml(stringTag);\n}\n/**\n * HTML-escapes the given text (`&`, `<`, `>`, `\"` and `'`).\n */\nfunction htmlEscapeToString(text) {\n    const escaped = text.replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&apos;');\n    return escaped;\n}\n/** Creates a `SafeHtml` value by concatenating multiple `SafeHtml`s. */\nexport function concatHtmls(htmls) {\n    return createHtml(htmls.map(unwrapHtml).join(''));\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,UAAU,EAAEC,UAAU,QAAQ,wBAAwB;AAC/D,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,YAAY,QAAQ,0BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAU,CAACC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC3C,IAAIC,iBAAiB,GAAGC,kBAAkB,CAACH,IAAI,CAAC;EAChD,IAAIC,OAAO,CAACG,cAAc,EAAE;IACxB;IACAF,iBAAiB,GACbA,iBAAiB,CAACG,OAAO,CAAC,iBAAiB,EAAE,UAAU,CAAC;EAChE;EACA,IAAIJ,OAAO,CAACK,gBAAgB,EAAE;IAC1BJ,iBAAiB,GAAGA,iBAAiB,CAACG,OAAO,CAAC,eAAe,EAAE,MAAM,CAAC;EAC1E;EACA,IAAIJ,OAAO,CAACM,YAAY,EAAE;IACtBL,iBAAiB,GAAGA,iBAAiB,CAACG,OAAO,CAAC,QAAQ,EAAE,yCAAyC,CAAC;EACtG;EACA,OAAOV,UAAU,CAACO,iBAAiB,CAAC;AACxC;AACA;AACA;AACA;AACA,OAAO,SAASM,YAAY,CAACC,MAAM,EAAER,OAAO,GAAG,CAAC,CAAC,EAAE;EAC/C,MAAMS,eAAe,GAAGZ,YAAY,CAACW,MAAM,CAAC,CAACE,QAAQ,EAAE;EACvD,IAAIC,SAAS,GAAI,SAAQ;EACzB,IAAIX,OAAO,CAACY,EAAE,EAAE;IACZD,SAAS,IAAK,QAAOT,kBAAkB,CAACF,OAAO,CAACY,EAAE,CAAE,GAAE;EAC1D;EACA,IAAIZ,OAAO,CAACa,KAAK,EAAE;IACfF,SAAS,IAAK,WAAUT,kBAAkB,CAACF,OAAO,CAACa,KAAK,CAAE,GAAE;EAChE;EACA,IAAIb,OAAO,CAACc,IAAI,EAAE;IACdH,SAAS,IAAK,UAAST,kBAAkB,CAACF,OAAO,CAACc,IAAI,CAAE,GAAE;EAC9D;EACAH,SAAS,IAAK,IAAGF,eAAgB,cAAa;EAC9C,OAAOf,UAAU,CAACiB,SAAS,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,eAAe,CAACC,GAAG,EAAEC,KAAK,EAAEJ,KAAK,EAAE;EAC/C,MAAMK,YAAY,GAAGtB,iBAAiB,CAACoB,GAAG,CAAC,CAACN,QAAQ,EAAE;EACtD,IAAIC,SAAS,GAAI,gBAAeT,kBAAkB,CAACgB,YAAY,CAAE,GAAE;EACnE,IAAID,KAAK,EAAE;IACPN,SAAS,IAAI,QAAQ;EACzB;EACA,IAAIE,KAAK,EAAE;IACPF,SAAS,IAAK,WAAUT,kBAAkB,CAACW,KAAK,CAAE,GAAE;EACxD;EACAF,SAAS,IAAI,eAAe;EAC5B,OAAOjB,UAAU,CAACiB,SAAS,CAAC;AAChC;AACA;AACA;AACA;AACA,SAAST,kBAAkB,CAACH,IAAI,EAAE;EAC9B,MAAMoB,OAAO,GAAGpB,IAAI,CAACK,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtCA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CACvBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;EAC5B,OAAOe,OAAO;AAClB;AACA;AACA,OAAO,SAASC,WAAW,CAACC,KAAK,EAAE;EAC/B,OAAO3B,UAAU,CAAC2B,KAAK,CAACC,GAAG,CAAC3B,UAAU,CAAC,CAAC4B,IAAI,CAAC,EAAE,CAAC,CAAC;AACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}