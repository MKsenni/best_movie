{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Library that provides safe getters for different node properties and\n * checks for clobbering.\n */\n/** Gets a reasonable nodeName, even for clobbered nodes. */\nexport function getNodeName(node) {\n  const nodeName = node.nodeName;\n  // If the property is clobbered, assume it is an `HTMLFormElement`.\n  return typeof nodeName === 'string' ? nodeName : 'FORM';\n}\n/** Returns true if the object passed is a Text node. */\nexport function isText(node) {\n  // The property cannot get clobbered on Text nodes.\n  return node.nodeType === Node.TEXT_NODE;\n}\n/** Returns true if the object passed is an Element node. */\nexport function isElement(node) {\n  const nodeType = node.nodeType;\n  // If the property is clobbered, we can assume it is an `HTMLFormElement`, and\n  // thus an `Element`.\n  return nodeType === Node.ELEMENT_NODE || typeof nodeType !== 'number';\n}","map":{"version":3,"names":["getNodeName","node","nodeName","isText","nodeType","Node","TEXT_NODE","isElement","ELEMENT_NODE"],"sources":["C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/safevalues/builders/html_sanitizer/no_clobber.mjs"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Library that provides safe getters for different node properties and\n * checks for clobbering.\n */\n/** Gets a reasonable nodeName, even for clobbered nodes. */\nexport function getNodeName(node) {\n    const nodeName = node.nodeName;\n    // If the property is clobbered, assume it is an `HTMLFormElement`.\n    return (typeof nodeName === 'string') ? nodeName : 'FORM';\n}\n/** Returns true if the object passed is a Text node. */\nexport function isText(node) {\n    // The property cannot get clobbered on Text nodes.\n    return node.nodeType === Node.TEXT_NODE;\n}\n/** Returns true if the object passed is an Element node. */\nexport function isElement(node) {\n    const nodeType = node.nodeType;\n    // If the property is clobbered, we can assume it is an `HTMLFormElement`, and\n    // thus an `Element`.\n    return (nodeType === Node.ELEMENT_NODE) || (typeof nodeType !== 'number');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,WAAW,CAACC,IAAI,EAAE;EAC9B,MAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAQ;EAC9B;EACA,OAAQ,OAAOA,QAAQ,KAAK,QAAQ,GAAIA,QAAQ,GAAG,MAAM;AAC7D;AACA;AACA,OAAO,SAASC,MAAM,CAACF,IAAI,EAAE;EACzB;EACA,OAAOA,IAAI,CAACG,QAAQ,KAAKC,IAAI,CAACC,SAAS;AAC3C;AACA;AACA,OAAO,SAASC,SAAS,CAACN,IAAI,EAAE;EAC5B,MAAMG,QAAQ,GAAGH,IAAI,CAACG,QAAQ;EAC9B;EACA;EACA,OAAQA,QAAQ,KAAKC,IAAI,CAACG,YAAY,IAAM,OAAOJ,QAAQ,KAAK,QAAS;AAC7E"},"metadata":{},"sourceType":"module","externalDependencies":[]}