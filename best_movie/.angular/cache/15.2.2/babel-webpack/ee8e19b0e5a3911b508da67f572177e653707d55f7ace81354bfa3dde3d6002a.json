{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { createScript, unwrapScript } from '../internals/script_impl';\nimport { assertIsTemplateObject } from '../internals/string_literal';\n/**\n * Creates a SafeScript object from a template literal (without any embedded\n * expressions).\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                           safeScript`foo`;\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function safeScript(templateObj) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertIsTemplateObject(templateObj, false, 'safeScript is a template literal tag function ' + 'that only accepts template literals without expressions. ' + 'For example, safeScript`foo`;');\n  }\n  return createScript(templateObj[0]);\n}\n/** Creates a `SafeScript` value by concatenating multiple `SafeScript`s. */\nexport function concatScripts(scripts) {\n  return createScript(scripts.map(unwrapScript).join(''));\n}\n/**\n * Converts a serializable value into JSON that is safe to interpolate into a\n * script context. In particular it escapes < characters so that a value of\n * \"</script>\" doesn't break out of the context.\n * @param value The value to serialize.\n */\nexport function scriptFromJson(value) {\n  return createScript(JSON.stringify(value).replace(/</g, '\\\\x3c'));\n}\n/**\n * Creates a `SafeScript` object from a template literal (without any embedded\n * expressions) along with additional arguments that the script should have\n * access to. These arguments will be JSON-encoded and passed to the script as\n * a function call.\n * @example\n * ```ts\n * safeScriptWithArgs`function (name, props) {\n *  console.log(name + ' is ' + props.age);\n * }`('Bob', { 'age': 42 })\n * ```\n * would return a `SafeScript` that represents the following code:\n * ```js\n * (function (name, props) {\n *  console.log(name + ' is ' + props.age);\n * })(\"Bob\",{\"age\":42})\n * ```\n * @note Be careful when passing objects as arguments, as unquoted property\n * names may be changed during compilation.\n * @param templateObj This contains the literal part of the template literal.\n * @param emptyArgs Expressions that evaluate to the empty string to enable\n *     inline comments.\n */\nexport function safeScriptWithArgs(templateObj, ...emptyArgs) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (emptyArgs.some(a => a !== '')) {\n      throw new Error('safeScriptWithArgs only allows empty string expressions ' + 'to enable inline comments.');\n    }\n    assertIsTemplateObject(templateObj, true, 'safeScriptWithArgs is a template literal tag function ' + 'that only accepts template literals. ' + 'For example, safeScriptWithArgs`foo`;');\n  }\n  return (...argValues) => {\n    const values = argValues.map(v => scriptFromJson(v).toString());\n    return createScript(`(${templateObj.join('')})(${values.join(',')})`);\n  };\n}","map":{"version":3,"names":["createScript","unwrapScript","assertIsTemplateObject","safeScript","templateObj","process","env","NODE_ENV","concatScripts","scripts","map","join","scriptFromJson","value","JSON","stringify","replace","safeScriptWithArgs","emptyArgs","some","a","Error","argValues","values","v","toString"],"sources":["C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/safevalues/builders/script_builders.mjs"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { createScript, unwrapScript } from '../internals/script_impl';\nimport { assertIsTemplateObject } from '../internals/string_literal';\n/**\n * Creates a SafeScript object from a template literal (without any embedded\n * expressions).\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                           safeScript`foo`;\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function safeScript(templateObj) {\n    if (process.env.NODE_ENV !== 'production') {\n        assertIsTemplateObject(templateObj, false, 'safeScript is a template literal tag function ' +\n            'that only accepts template literals without expressions. ' +\n            'For example, safeScript`foo`;');\n    }\n    return createScript(templateObj[0]);\n}\n/** Creates a `SafeScript` value by concatenating multiple `SafeScript`s. */\nexport function concatScripts(scripts) {\n    return createScript(scripts.map(unwrapScript).join(''));\n}\n/**\n * Converts a serializable value into JSON that is safe to interpolate into a\n * script context. In particular it escapes < characters so that a value of\n * \"</script>\" doesn't break out of the context.\n * @param value The value to serialize.\n */\nexport function scriptFromJson(value) {\n    return createScript(JSON.stringify(value).replace(/</g, '\\\\x3c'));\n}\n/**\n * Creates a `SafeScript` object from a template literal (without any embedded\n * expressions) along with additional arguments that the script should have\n * access to. These arguments will be JSON-encoded and passed to the script as\n * a function call.\n * @example\n * ```ts\n * safeScriptWithArgs`function (name, props) {\n *  console.log(name + ' is ' + props.age);\n * }`('Bob', { 'age': 42 })\n * ```\n * would return a `SafeScript` that represents the following code:\n * ```js\n * (function (name, props) {\n *  console.log(name + ' is ' + props.age);\n * })(\"Bob\",{\"age\":42})\n * ```\n * @note Be careful when passing objects as arguments, as unquoted property\n * names may be changed during compilation.\n * @param templateObj This contains the literal part of the template literal.\n * @param emptyArgs Expressions that evaluate to the empty string to enable\n *     inline comments.\n */\nexport function safeScriptWithArgs(templateObj, ...emptyArgs) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (emptyArgs.some(a => a !== '')) {\n            throw new Error('safeScriptWithArgs only allows empty string expressions ' +\n                'to enable inline comments.');\n        }\n        assertIsTemplateObject(templateObj, true, 'safeScriptWithArgs is a template literal tag function ' +\n            'that only accepts template literals. ' +\n            'For example, safeScriptWithArgs`foo`;');\n    }\n    return (...argValues) => {\n        const values = argValues.map((v) => scriptFromJson(v).toString());\n        return createScript(`(${templateObj.join('')})(${values.join(',')})`);\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,oBAAoB;AAC3B,SAASA,YAAY,EAAEC,YAAY,QAAQ,0BAA0B;AACrE,SAASC,sBAAsB,QAAQ,6BAA6B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAU,CAACC,WAAW,EAAE;EACpC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvCL,sBAAsB,CAACE,WAAW,EAAE,KAAK,EAAE,gDAAgD,GACvF,2DAA2D,GAC3D,+BAA+B,CAAC;EACxC;EACA,OAAOJ,YAAY,CAACI,WAAW,CAAC,CAAC,CAAC,CAAC;AACvC;AACA;AACA,OAAO,SAASI,aAAa,CAACC,OAAO,EAAE;EACnC,OAAOT,YAAY,CAACS,OAAO,CAACC,GAAG,CAACT,YAAY,CAAC,CAACU,IAAI,CAAC,EAAE,CAAC,CAAC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAc,CAACC,KAAK,EAAE;EAClC,OAAOb,YAAY,CAACc,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,CAACG,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkB,CAACb,WAAW,EAAE,GAAGc,SAAS,EAAE;EAC1D,IAAIb,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvC,IAAIW,SAAS,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,KAAK,EAAE,CAAC,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAAC,0DAA0D,GACtE,4BAA4B,CAAC;IACrC;IACAnB,sBAAsB,CAACE,WAAW,EAAE,IAAI,EAAE,wDAAwD,GAC9F,uCAAuC,GACvC,uCAAuC,CAAC;EAChD;EACA,OAAO,CAAC,GAAGkB,SAAS,KAAK;IACrB,MAAMC,MAAM,GAAGD,SAAS,CAACZ,GAAG,CAAEc,CAAC,IAAKZ,cAAc,CAACY,CAAC,CAAC,CAACC,QAAQ,EAAE,CAAC;IACjE,OAAOzB,YAAY,CAAE,IAAGI,WAAW,CAACO,IAAI,CAAC,EAAE,CAAE,KAAIY,MAAM,CAACZ,IAAI,CAAC,GAAG,CAAE,GAAE,CAAC;EACzE,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}