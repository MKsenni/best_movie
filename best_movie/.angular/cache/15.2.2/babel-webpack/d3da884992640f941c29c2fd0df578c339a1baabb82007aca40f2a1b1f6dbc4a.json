{"ast":null,"code":"import { GENRE } from './genre';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BestMovieService {\n  constructor(http) {\n    this.http = http;\n  }\n  getMovie() {\n    return this.http.get('../assets/data.json');\n  }\n  parseResponse({\n    data\n  }) {\n    let genreFilm = {\n      GENRE,\n      const: ({\n        movies\n      } = data),\n      return: movies.map(item => {\n        return {\n          url: item.url,\n          name: item.name,\n          year: item.year,\n          id: item.id,\n          description: item.description,\n          genre: item.genre.forEach(element => {\n            const find = genreFilm.find(item => item.id === element);\n            console.log(find);\n            return item.genre = find?.name;\n          })\n          // genre: item.genre.filter((item: any) => {\n          //   return {\n          //     item\n          //   }\n          // })\n        };\n      })\n    };\n  }\n}\n\nBestMovieService.ɵfac = function BestMovieService_Factory(t) {\n  return new (t || BestMovieService)(i0.ɵɵinject(i1.HttpClient));\n};\nBestMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BestMovieService,\n  factory: BestMovieService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,KAAK,QAAQ,SAAS;;;AAK/B,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAExCC,QAAQ;IACN,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,qBAAqB,CAAC;EAC7C;EAEAC,aAAa,CAAC;IAACC;EAAI,CAAM;IACvB,IAAIC,SAAS,GAAG;MAACR,KAAK;MACtBS,KAAK,GAAC;QAACC;MAAM,CAAC,GAAGH,IAAI;MACnBI,MAAM,EAACD,MAAM,CAACE,GAAG,CAAEC,IAAS,IAAI;QAC9B,OAAO;UACLC,GAAG,EAAED,IAAI,CAACC,GAAG;UACbC,IAAI,EAAEF,IAAI,CAACE,IAAI;UACfC,IAAI,EAAEH,IAAI,CAACG,IAAI;UACfC,EAAE,EAAEJ,IAAI,CAACI,EAAE;UACXC,WAAW,EAAEL,IAAI,CAACK,WAAW;UAC7BC,KAAK,EAAEN,IAAI,CAACM,KAAK,CAACC,OAAO,CAAEC,OAAY,IAAI;YACzC,MAAMC,IAAI,GAAGd,SAAS,CAACc,IAAI,CAAET,IAAI,IAAKA,IAAI,CAACI,EAAE,KAAKI,OAAO,CAAC;YAC1DE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;YACjB,OAAOT,IAAI,CAACM,KAAK,GAAGG,IAAI,EAAEP,IAAI;UAChC,CAAC;UACD;UACA;UACA;UACA;UACA;SACD;MACH,CAAC;KACJ;EACH;;;AA/Bad,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAwB,SAAhBxB,gBAAgB;EAAAyB,YAFf;AAAM","names":["GENRE","BestMovieService","constructor","http","getMovie","get","parseResponse","data","genreFilm","const","movies","return","map","item","url","name","year","id","description","genre","forEach","element","find","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Acer\\Desktop\\best_movie\\best_movie\\src\\app\\best-movie.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { GENRE } from './genre';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BestMovieService {\n\n  constructor(private http: HttpClient) { }\n\n  getMovie() {\n    return this.http.get('../assets/data.json');\n  }\n\n  parseResponse({data}: any) {\n    let genreFilm = {GENRE;\n    const {movies} = data;\n      return movies.map((item: any) => {\n        return {\n          url: item.url,\n          name: item.name,\n          year: item.year,\n          id: item.id,\n          description: item.description,\n          genre: item.genre.forEach((element: any) => {\n            const find = genreFilm.find((item) => item.id === element);\n            console.log(find);\n            return item.genre = find?.name\n          }),\n          // genre: item.genre.filter((item: any) => {\n          //   return {\n          //     item\n          //   }\n          // })\n        };\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}