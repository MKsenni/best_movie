{"ast":null,"code":"import _defineProperty from \"C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { ensureTokenIsValid, secretToken } from './secrets';\n/** A prefix with which an attribute is safe to set using plain strings. */\nexport class SafeAttributePrefix {\n  constructor() {\n    // @ts-ignore: error TS6133: 'brand' is declared but its value is never read.\n    _defineProperty(this, \"brand\", void 0);\n  } // To prevent structural typing.\n}\n/** Implementation for `SafeAttributePrefix` */\nclass AttributePrefixImpl extends SafeAttributePrefix {\n  constructor(attrPrefix, token) {\n    super();\n    _defineProperty(this, \"privateDoNotAccessOrElseWrappedAttrPrefix\", void 0);\n    if (process.env.NODE_ENV !== 'production') {\n      ensureTokenIsValid(token);\n    }\n    this.privateDoNotAccessOrElseWrappedAttrPrefix = attrPrefix;\n  }\n  toString() {\n    return this.privateDoNotAccessOrElseWrappedAttrPrefix;\n  }\n}\n/**\n * Builds a new `SafeAttribute` from the given string, without enforcing\n * safety guarantees. This shouldn't be exposed to application developers, and\n * must only be used as a step towards safe builders or safe constants.\n */\nexport function createAttributePrefix(attrPrefix) {\n  return new AttributePrefixImpl(attrPrefix, secretToken);\n}\n/**\n * Returns the string value of the passed `SafeAttributePrefix` object while\n * ensuring it has the correct type.\n */\nexport function unwrapAttributePrefix(value) {\n  if (value instanceof AttributePrefixImpl) {\n    return value.privateDoNotAccessOrElseWrappedAttrPrefix;\n  } else {\n    let message = '';\n    if (process.env.NODE_ENV !== 'production') {\n      message = 'Unexpected type when unwrapping SafeAttributePrefix';\n    }\n    throw new Error(message);\n  }\n}","map":{"version":3,"names":["ensureTokenIsValid","secretToken","SafeAttributePrefix","AttributePrefixImpl","constructor","attrPrefix","token","process","env","NODE_ENV","privateDoNotAccessOrElseWrappedAttrPrefix","toString","createAttributePrefix","unwrapAttributePrefix","value","message","Error"],"sources":["C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/safevalues/internals/attribute_impl.mjs"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { ensureTokenIsValid, secretToken } from './secrets';\n/** A prefix with which an attribute is safe to set using plain strings. */\nexport class SafeAttributePrefix {\n    // @ts-ignore: error TS6133: 'brand' is declared but its value is never read.\n    brand; // To prevent structural typing.\n}\n/** Implementation for `SafeAttributePrefix` */\nclass AttributePrefixImpl extends SafeAttributePrefix {\n    privateDoNotAccessOrElseWrappedAttrPrefix;\n    constructor(attrPrefix, token) {\n        super();\n        if (process.env.NODE_ENV !== 'production') {\n            ensureTokenIsValid(token);\n        }\n        this.privateDoNotAccessOrElseWrappedAttrPrefix = attrPrefix;\n    }\n    toString() {\n        return this.privateDoNotAccessOrElseWrappedAttrPrefix;\n    }\n}\n/**\n * Builds a new `SafeAttribute` from the given string, without enforcing\n * safety guarantees. This shouldn't be exposed to application developers, and\n * must only be used as a step towards safe builders or safe constants.\n */\nexport function createAttributePrefix(attrPrefix) {\n    return new AttributePrefixImpl(attrPrefix, secretToken);\n}\n/**\n * Returns the string value of the passed `SafeAttributePrefix` object while\n * ensuring it has the correct type.\n */\nexport function unwrapAttributePrefix(value) {\n    if (value instanceof AttributePrefixImpl) {\n        return value.privateDoNotAccessOrElseWrappedAttrPrefix;\n    }\n    else {\n        let message = '';\n        if (process.env.NODE_ENV !== 'production') {\n            message = 'Unexpected type when unwrapping SafeAttributePrefix';\n        }\n        throw new Error(message);\n    }\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA,OAAO,oBAAoB;AAC3B,SAASA,kBAAkB,EAAEC,WAAW,QAAQ,WAAW;AAC3D;AACA,OAAO,MAAMC,mBAAmB,CAAC;EAAA;IAC7B;IAAA;EAAA,EACO;AACX;AACA;AACA,MAAMC,mBAAmB,SAASD,mBAAmB,CAAC;EAElDE,WAAW,CAACC,UAAU,EAAEC,KAAK,EAAE;IAC3B,KAAK,EAAE;IAAC;IACR,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCT,kBAAkB,CAACM,KAAK,CAAC;IAC7B;IACA,IAAI,CAACI,yCAAyC,GAAGL,UAAU;EAC/D;EACAM,QAAQ,GAAG;IACP,OAAO,IAAI,CAACD,yCAAyC;EACzD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,qBAAqB,CAACP,UAAU,EAAE;EAC9C,OAAO,IAAIF,mBAAmB,CAACE,UAAU,EAAEJ,WAAW,CAAC;AAC3D;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,qBAAqB,CAACC,KAAK,EAAE;EACzC,IAAIA,KAAK,YAAYX,mBAAmB,EAAE;IACtC,OAAOW,KAAK,CAACJ,yCAAyC;EAC1D,CAAC,MACI;IACD,IAAIK,OAAO,GAAG,EAAE;IAChB,IAAIR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCM,OAAO,GAAG,qDAAqD;IACnE;IACA,MAAM,IAAIC,KAAK,CAACD,OAAO,CAAC;EAC5B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}