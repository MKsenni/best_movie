{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * A secret token that must be passed to safe type constructors. It is only\n * accessible from within safevalues, ensuring that unrestricted safe type\n * creation is only possible within safevalues. In particular, this prevents\n * forgery such as `safeHtmlValue.constructor('javascript:evil')`.\n */\nexport const secretToken = {};\n/**\n * Asserts that the given token matches the secret safevalues token. An\n * exception is thrown if that is not the case.\n */\nexport function ensureTokenIsValid(token) {\n  if (token !== secretToken) {\n    throw new Error('Bad secret');\n  }\n}","map":{"version":3,"names":["secretToken","ensureTokenIsValid","token","Error"],"sources":["C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/safevalues/internals/secrets.mjs"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * A secret token that must be passed to safe type constructors. It is only\n * accessible from within safevalues, ensuring that unrestricted safe type\n * creation is only possible within safevalues. In particular, this prevents\n * forgery such as `safeHtmlValue.constructor('javascript:evil')`.\n */\nexport const secretToken = {};\n/**\n * Asserts that the given token matches the secret safevalues token. An\n * exception is thrown if that is not the case.\n */\nexport function ensureTokenIsValid(token) {\n    if (token !== secretToken) {\n        throw new Error('Bad secret');\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,WAAW,GAAG,CAAC,CAAC;AAC7B;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkB,CAACC,KAAK,EAAE;EACtC,IAAIA,KAAK,KAAKF,WAAW,EAAE;IACvB,MAAM,IAAIG,KAAK,CAAC,YAAY,CAAC;EACjC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}