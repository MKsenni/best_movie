{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * The name of the Trusted Types policy used by TS safevalues, or empty\n * to disable Trusted Types. This duplicates the 'google#safe', but\n * can be overridden in tests.\n */\nlet trustedTypesPolicyName = 'google#safe';\n/** Helper to retrieve the value of `window.trustedTypes`. */\nfunction trustedTypes() {\n  if (typeof window !== 'undefined') {\n    return window.trustedTypes;\n  }\n  return undefined;\n}\n/**\n * Returns window.trustedTypes if Trusted Types are enabled and supported, or\n * null otherwise.\n */\nexport function getTrustedTypes() {\n  return trustedTypesPolicyName !== '' ? trustedTypes() ?? null : null;\n}\n/**\n * The Trusted Types policy used by TS safevalues, or null if Trusted Types\n * are not enabled/supported, or undefined if the policy has not been created\n * yet.\n */\nlet trustedTypesPolicy;\n/**\n * Returns the Trusted Types policy used by TS safevalues, or null if Trusted\n * Types are not enabled/supported. The first call to this function will\n * create the policy.\n */\nexport function getTrustedTypesPolicy() {\n  if (trustedTypesPolicy === undefined) {\n    try {\n      trustedTypesPolicy = getTrustedTypes()?.createPolicy(trustedTypesPolicyName, {\n        createHTML: s => s,\n        createScript: s => s,\n        createScriptURL: s => s\n      }) ?? null;\n    } catch {\n      // In Chromium versions before 81, trustedTypes.createPolicy throws if\n      // called with a name that is already registered, even if no CSP is set.\n      // Until users have largely migrated to 81 or above, catch the error not\n      // to break the applications functionally. In such case, the code will\n      // fall back to using regular Safe Types.\n      trustedTypesPolicy = null;\n    }\n  }\n  return trustedTypesPolicy;\n}\n/** Helpers for tests. */\nexport const TEST_ONLY = {\n  resetDefaults() {\n    trustedTypesPolicy = undefined;\n    trustedTypesPolicyName = 'google#safe';\n  },\n  setTrustedTypesPolicyName(name) {\n    trustedTypesPolicyName = name;\n  }\n};","map":{"version":3,"names":["trustedTypesPolicyName","trustedTypes","window","undefined","getTrustedTypes","trustedTypesPolicy","getTrustedTypesPolicy","createPolicy","createHTML","s","createScript","createScriptURL","TEST_ONLY","resetDefaults","setTrustedTypesPolicyName","name"],"sources":["C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/safevalues/internals/trusted_types.mjs"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * The name of the Trusted Types policy used by TS safevalues, or empty\n * to disable Trusted Types. This duplicates the 'google#safe', but\n * can be overridden in tests.\n */\nlet trustedTypesPolicyName = 'google#safe';\n/** Helper to retrieve the value of `window.trustedTypes`. */\nfunction trustedTypes() {\n    if (typeof window !== 'undefined') {\n        return window.trustedTypes;\n    }\n    return undefined;\n}\n/**\n * Returns window.trustedTypes if Trusted Types are enabled and supported, or\n * null otherwise.\n */\nexport function getTrustedTypes() {\n    return (trustedTypesPolicyName !== '') ? (trustedTypes() ?? null) : null;\n}\n/**\n * The Trusted Types policy used by TS safevalues, or null if Trusted Types\n * are not enabled/supported, or undefined if the policy has not been created\n * yet.\n */\nlet trustedTypesPolicy;\n/**\n * Returns the Trusted Types policy used by TS safevalues, or null if Trusted\n * Types are not enabled/supported. The first call to this function will\n * create the policy.\n */\nexport function getTrustedTypesPolicy() {\n    if (trustedTypesPolicy === undefined) {\n        try {\n            trustedTypesPolicy =\n                getTrustedTypes()?.createPolicy(trustedTypesPolicyName, {\n                    createHTML: (s) => s,\n                    createScript: (s) => s,\n                    createScriptURL: (s) => s\n                }) ??\n                    null;\n        }\n        catch {\n            // In Chromium versions before 81, trustedTypes.createPolicy throws if\n            // called with a name that is already registered, even if no CSP is set.\n            // Until users have largely migrated to 81 or above, catch the error not\n            // to break the applications functionally. In such case, the code will\n            // fall back to using regular Safe Types.\n            trustedTypesPolicy = null;\n        }\n    }\n    return trustedTypesPolicy;\n}\n/** Helpers for tests. */\nexport const TEST_ONLY = {\n    resetDefaults() {\n        trustedTypesPolicy = undefined;\n        trustedTypesPolicyName = 'google#safe';\n    },\n    setTrustedTypesPolicyName(name) {\n        trustedTypesPolicyName = name;\n    },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,sBAAsB,GAAG,aAAa;AAC1C;AACA,SAASC,YAAY,GAAG;EACpB,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IAC/B,OAAOA,MAAM,CAACD,YAAY;EAC9B;EACA,OAAOE,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAe,GAAG;EAC9B,OAAQJ,sBAAsB,KAAK,EAAE,GAAKC,YAAY,EAAE,IAAI,IAAI,GAAI,IAAI;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,IAAII,kBAAkB;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqB,GAAG;EACpC,IAAID,kBAAkB,KAAKF,SAAS,EAAE;IAClC,IAAI;MACAE,kBAAkB,GACdD,eAAe,EAAE,EAAEG,YAAY,CAACP,sBAAsB,EAAE;QACpDQ,UAAU,EAAGC,CAAC,IAAKA,CAAC;QACpBC,YAAY,EAAGD,CAAC,IAAKA,CAAC;QACtBE,eAAe,EAAGF,CAAC,IAAKA;MAC5B,CAAC,CAAC,IACE,IAAI;IAChB,CAAC,CACD,MAAM;MACF;MACA;MACA;MACA;MACA;MACAJ,kBAAkB,GAAG,IAAI;IAC7B;EACJ;EACA,OAAOA,kBAAkB;AAC7B;AACA;AACA,OAAO,MAAMO,SAAS,GAAG;EACrBC,aAAa,GAAG;IACZR,kBAAkB,GAAGF,SAAS;IAC9BH,sBAAsB,GAAG,aAAa;EAC1C,CAAC;EACDc,yBAAyB,CAACC,IAAI,EAAE;IAC5Bf,sBAAsB,GAAGe,IAAI;EACjC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}