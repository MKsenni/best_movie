{"ast":null,"code":"import _defineProperty from \"C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { secretToken } from '../../internals/secrets';\nimport { HtmlSanitizerImpl } from './html_sanitizer';\nimport { defaultSanitizerTable } from './sanitizer_table/default_sanitizer_table';\nimport { AttributePolicyAction, SanitizerTable } from './sanitizer_table/sanitizer_table';\n/** This class allows modifications to the default sanitizer configuration. */\nexport class HtmlSanitizerBuilder {\n  // To denote if the builder has called build() and therefore should make no\n  // further changes to the sanitizer table.\n\n  constructor() {\n    _defineProperty(this, \"sanitizerTable\", void 0);\n    _defineProperty(this, \"calledBuild\", false);\n    this.sanitizerTable = defaultSanitizerTable;\n  }\n  /** Builder option to restrict allowed elements to a smaller subset. */\n  onlyAllowElements(elementSet) {\n    const allowedElements = new Set();\n    const allowedElementPolicies = new Map();\n    for (let element of elementSet) {\n      element = element.toUpperCase();\n      if (!this.sanitizerTable.isAllowedElement(element)) {\n        throw new Error(`Element: ${element}, is not allowed by html5_contract.textpb`);\n      }\n      const elementPolicy = this.sanitizerTable.elementPolicies.get(element);\n      if (elementPolicy !== undefined) {\n        allowedElementPolicies.set(element, elementPolicy);\n      } else {\n        allowedElements.add(element);\n      }\n    }\n    this.sanitizerTable = new SanitizerTable(allowedElements, allowedElementPolicies, this.sanitizerTable.allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Builder option to restrict allowed attributes to a smaller subset.\n   *\n   * If the attribute isn't currently allowed then it won't be added.\n   */\n  onlyAllowAttributes(attributeSet) {\n    const allowedGlobalAttributes = new Set();\n    const globalAttributePolicies = new Map();\n    const elementPolicies = new Map();\n    for (const attribute of attributeSet) {\n      if (this.sanitizerTable.allowedGlobalAttributes.has(attribute)) {\n        allowedGlobalAttributes.add(attribute);\n      }\n      if (this.sanitizerTable.globalAttributePolicies.has(attribute)) {\n        globalAttributePolicies.set(attribute, this.sanitizerTable.globalAttributePolicies.get(attribute));\n      }\n    }\n    for (const [elementName, originalElementPolicy] of this.sanitizerTable.elementPolicies.entries()) {\n      const newElementPolicy = new Map();\n      for (const [attribute, attributePolicy] of originalElementPolicy.entries()) {\n        if (attributeSet.has(attribute)) {\n          newElementPolicy.set(attribute, attributePolicy);\n        }\n      }\n      elementPolicies.set(elementName, newElementPolicy);\n    }\n    this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Allows the set of data attributes passed.\n   *\n   * These values must be prefixed with \"data-\"\n   *\n   * If called with onlyAllowElements or onlyAllowAttributes, those methods must\n   * be called first.\n   */\n  allowDataAttributes(attributes) {\n    const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);\n    for (const attribute of attributes) {\n      if (attribute.indexOf('data-') !== 0) {\n        throw new Error(`data attribute: ${attribute} does not begin with the prefix \"data-\"`);\n      }\n      allowedGlobalAttributes.add(attribute);\n    }\n    this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Preserves style attributes. Note that the sanitizer won't parse and\n   * sanitize the values but keep them as they are. In particular this means\n   * that the code will be able to call functions that could do undesirable\n   * things (e.g. `url` to trigger a network request), as well as any custom\n   * properties or functions defined by the application.\n   */\n  allowStyleAttributes() {\n    const globalAttributePolicies = new Map(this.sanitizerTable.globalAttributePolicies);\n    globalAttributePolicies.set('style', {\n      policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_STYLE\n    });\n    this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, this.sanitizerTable.allowedGlobalAttributes, globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Preserves the class attribute on all elements. This means contents can\n   * adopt CSS styles from other page elements and possibly mask themselves as\n   * legitimate UI elements, which can lead to phishing.\n   */\n  allowClassAttributes() {\n    const globalAttributePolicies = new Map(this.sanitizerTable.globalAttributePolicies);\n    globalAttributePolicies.set('class', {\n      policyAction: AttributePolicyAction.KEEP\n    });\n    this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, this.sanitizerTable.allowedGlobalAttributes, globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Preserves id attributes. This carries moderate risk as it allows an\n   * element to override other elements with the same ID.\n   */\n  allowIdAttributes() {\n    const globalAttributePolicies = new Map(this.sanitizerTable.globalAttributePolicies);\n    globalAttributePolicies.set('id', {\n      policyAction: AttributePolicyAction.KEEP\n    });\n    this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, this.sanitizerTable.allowedGlobalAttributes, globalAttributePolicies);\n    return this;\n  }\n  build() {\n    if (this.calledBuild) {\n      throw new Error('this sanitizer has already called build');\n    }\n    this.calledBuild = true;\n    return new HtmlSanitizerImpl(this.sanitizerTable, secretToken);\n  }\n}","map":{"version":3,"names":["secretToken","HtmlSanitizerImpl","defaultSanitizerTable","AttributePolicyAction","SanitizerTable","HtmlSanitizerBuilder","constructor","sanitizerTable","onlyAllowElements","elementSet","allowedElements","Set","allowedElementPolicies","Map","element","toUpperCase","isAllowedElement","Error","elementPolicy","elementPolicies","get","undefined","set","add","allowedGlobalAttributes","globalAttributePolicies","onlyAllowAttributes","attributeSet","attribute","has","elementName","originalElementPolicy","entries","newElementPolicy","attributePolicy","allowDataAttributes","attributes","indexOf","allowStyleAttributes","policyAction","KEEP_AND_SANITIZE_STYLE","allowClassAttributes","KEEP","allowIdAttributes","build","calledBuild"],"sources":["C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/safevalues/builders/html_sanitizer/html_sanitizer_builder.mjs"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { secretToken } from '../../internals/secrets';\nimport { HtmlSanitizerImpl } from './html_sanitizer';\nimport { defaultSanitizerTable } from './sanitizer_table/default_sanitizer_table';\nimport { AttributePolicyAction, SanitizerTable } from './sanitizer_table/sanitizer_table';\n/** This class allows modifications to the default sanitizer configuration. */\nexport class HtmlSanitizerBuilder {\n    sanitizerTable;\n    // To denote if the builder has called build() and therefore should make no\n    // further changes to the sanitizer table.\n    calledBuild = false;\n    constructor() {\n        this.sanitizerTable = defaultSanitizerTable;\n    }\n    /** Builder option to restrict allowed elements to a smaller subset. */\n    onlyAllowElements(elementSet) {\n        const allowedElements = new Set();\n        const allowedElementPolicies = new Map();\n        for (let element of elementSet) {\n            element = element.toUpperCase();\n            if (!this.sanitizerTable.isAllowedElement(element)) {\n                throw new Error(`Element: ${element}, is not allowed by html5_contract.textpb`);\n            }\n            const elementPolicy = this.sanitizerTable.elementPolicies.get(element);\n            if (elementPolicy !== undefined) {\n                allowedElementPolicies.set(element, elementPolicy);\n            }\n            else {\n                allowedElements.add(element);\n            }\n        }\n        this.sanitizerTable = new SanitizerTable(allowedElements, allowedElementPolicies, this.sanitizerTable.allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Builder option to restrict allowed attributes to a smaller subset.\n     *\n     * If the attribute isn't currently allowed then it won't be added.\n     */\n    onlyAllowAttributes(attributeSet) {\n        const allowedGlobalAttributes = new Set();\n        const globalAttributePolicies = new Map();\n        const elementPolicies = new Map();\n        for (const attribute of attributeSet) {\n            if (this.sanitizerTable.allowedGlobalAttributes.has(attribute)) {\n                allowedGlobalAttributes.add(attribute);\n            }\n            if (this.sanitizerTable.globalAttributePolicies.has(attribute)) {\n                globalAttributePolicies.set(attribute, this.sanitizerTable.globalAttributePolicies.get(attribute));\n            }\n        }\n        for (const [elementName, originalElementPolicy] of this.sanitizerTable\n            .elementPolicies.entries()) {\n            const newElementPolicy = new Map();\n            for (const [attribute, attributePolicy] of originalElementPolicy\n                .entries()) {\n                if (attributeSet.has(attribute)) {\n                    newElementPolicy.set(attribute, attributePolicy);\n                }\n            }\n            elementPolicies.set(elementName, newElementPolicy);\n        }\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Allows the set of data attributes passed.\n     *\n     * These values must be prefixed with \"data-\"\n     *\n     * If called with onlyAllowElements or onlyAllowAttributes, those methods must\n     * be called first.\n     */\n    allowDataAttributes(attributes) {\n        const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);\n        for (const attribute of attributes) {\n            if (attribute.indexOf('data-') !== 0) {\n                throw new Error(`data attribute: ${attribute} does not begin with the prefix \"data-\"`);\n            }\n            allowedGlobalAttributes.add(attribute);\n        }\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Preserves style attributes. Note that the sanitizer won't parse and\n     * sanitize the values but keep them as they are. In particular this means\n     * that the code will be able to call functions that could do undesirable\n     * things (e.g. `url` to trigger a network request), as well as any custom\n     * properties or functions defined by the application.\n     */\n    allowStyleAttributes() {\n        const globalAttributePolicies = new Map(this.sanitizerTable.globalAttributePolicies);\n        globalAttributePolicies.set('style', { policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_STYLE });\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, this.sanitizerTable.allowedGlobalAttributes, globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Preserves the class attribute on all elements. This means contents can\n     * adopt CSS styles from other page elements and possibly mask themselves as\n     * legitimate UI elements, which can lead to phishing.\n     */\n    allowClassAttributes() {\n        const globalAttributePolicies = new Map(this.sanitizerTable.globalAttributePolicies);\n        globalAttributePolicies.set('class', { policyAction: AttributePolicyAction.KEEP });\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, this.sanitizerTable.allowedGlobalAttributes, globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Preserves id attributes. This carries moderate risk as it allows an\n     * element to override other elements with the same ID.\n     */\n    allowIdAttributes() {\n        const globalAttributePolicies = new Map(this.sanitizerTable.globalAttributePolicies);\n        globalAttributePolicies.set('id', { policyAction: AttributePolicyAction.KEEP });\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, this.sanitizerTable.allowedGlobalAttributes, globalAttributePolicies);\n        return this;\n    }\n    build() {\n        if (this.calledBuild) {\n            throw new Error('this sanitizer has already called build');\n        }\n        this.calledBuild = true;\n        return new HtmlSanitizerImpl(this.sanitizerTable, secretToken);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}