{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { assertIsTemplateObject } from '../internals/string_literal';\nimport { createStyle, unwrapStyle } from '../internals/style_impl';\n/**\n * Creates a SafeStyle object from a template literal (without any embedded\n * expressions).\n *\n * ` style` should be in the format\n * ` name: value; [name: value; ...]` and must not have any < or >\n * characters in it. This is so that SafeStyle's contract is preserved,\n * allowing the SafeStyle to correctly be interpreted as a sequence of CSS\n * declarations and without affecting the syntactic structure of any\n * surrounding CSS and HTML.\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                          safeStyle`foo`;\n * This function first checks if it is called with a literal template, and\n * then performs basic sanity checks on the format of ` style`\n * but does not constrain the format of ` name} and {@code value`, except\n * for disallowing tag characters.\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function safeStyle(templateObj) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertIsTemplateObject(templateObj, false, 'safeStyle is a template literal tag function ' + 'that only accepts template literals without expressions. ' + 'For example, safeStyle`foo`;');\n  }\n  const style = templateObj[0];\n  if (process.env.NODE_ENV !== 'production') {\n    if (/[<>]/.test(style)) {\n      throw new Error('Forbidden characters in style string: ' + style);\n    }\n    if (!/;$/.test(style)) {\n      throw new Error('Style string does not end with \";\": ' + style);\n    }\n    if (!/:/.test(style)) {\n      throw new Error('Style string should contain one or more \":\": ' + style);\n    }\n  }\n  return createStyle(style);\n}\n/** Creates a `SafeStyle` value by concatenating multiple `SafeStyle`s. */\nexport function concatStyles(styles) {\n  return createStyle(styles.map(unwrapStyle).join(''));\n}","map":{"version":3,"names":["assertIsTemplateObject","createStyle","unwrapStyle","safeStyle","templateObj","process","env","NODE_ENV","style","test","Error","concatStyles","styles","map","join"],"sources":["C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/safevalues/builders/style_builders.mjs"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { assertIsTemplateObject } from '../internals/string_literal';\nimport { createStyle, unwrapStyle } from '../internals/style_impl';\n/**\n * Creates a SafeStyle object from a template literal (without any embedded\n * expressions).\n *\n * ` style` should be in the format\n * ` name: value; [name: value; ...]` and must not have any < or >\n * characters in it. This is so that SafeStyle's contract is preserved,\n * allowing the SafeStyle to correctly be interpreted as a sequence of CSS\n * declarations and without affecting the syntactic structure of any\n * surrounding CSS and HTML.\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                          safeStyle`foo`;\n * This function first checks if it is called with a literal template, and\n * then performs basic sanity checks on the format of ` style`\n * but does not constrain the format of ` name} and {@code value`, except\n * for disallowing tag characters.\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function safeStyle(templateObj) {\n    if (process.env.NODE_ENV !== 'production') {\n        assertIsTemplateObject(templateObj, false, 'safeStyle is a template literal tag function ' +\n            'that only accepts template literals without expressions. ' +\n            'For example, safeStyle`foo`;');\n    }\n    const style = templateObj[0];\n    if (process.env.NODE_ENV !== 'production') {\n        if (/[<>]/.test(style)) {\n            throw new Error('Forbidden characters in style string: ' + style);\n        }\n        if (!/;$/.test(style)) {\n            throw new Error('Style string does not end with \";\": ' + style);\n        }\n        if (!/:/.test(style)) {\n            throw new Error('Style string should contain one or more \":\": ' + style);\n        }\n    }\n    return createStyle(style);\n}\n/** Creates a `SafeStyle` value by concatenating multiple `SafeStyle`s. */\nexport function concatStyles(styles) {\n    return createStyle(styles.map(unwrapStyle).join(''));\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,oBAAoB;AAC3B,SAASA,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,WAAW,EAAEC,WAAW,QAAQ,yBAAyB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAAS,CAACC,WAAW,EAAE;EACnC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvCP,sBAAsB,CAACI,WAAW,EAAE,KAAK,EAAE,+CAA+C,GACtF,2DAA2D,GAC3D,8BAA8B,CAAC;EACvC;EACA,MAAMI,KAAK,GAAGJ,WAAW,CAAC,CAAC,CAAC;EAC5B,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvC,IAAI,MAAM,CAACE,IAAI,CAACD,KAAK,CAAC,EAAE;MACpB,MAAM,IAAIE,KAAK,CAAC,wCAAwC,GAAGF,KAAK,CAAC;IACrE;IACA,IAAI,CAAC,IAAI,CAACC,IAAI,CAACD,KAAK,CAAC,EAAE;MACnB,MAAM,IAAIE,KAAK,CAAC,sCAAsC,GAAGF,KAAK,CAAC;IACnE;IACA,IAAI,CAAC,GAAG,CAACC,IAAI,CAACD,KAAK,CAAC,EAAE;MAClB,MAAM,IAAIE,KAAK,CAAC,+CAA+C,GAAGF,KAAK,CAAC;IAC5E;EACJ;EACA,OAAOP,WAAW,CAACO,KAAK,CAAC;AAC7B;AACA;AACA,OAAO,SAASG,YAAY,CAACC,MAAM,EAAE;EACjC,OAAOX,WAAW,CAACW,MAAM,CAACC,GAAG,CAACX,WAAW,CAAC,CAACY,IAAI,CAAC,EAAE,CAAC,CAAC;AACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}