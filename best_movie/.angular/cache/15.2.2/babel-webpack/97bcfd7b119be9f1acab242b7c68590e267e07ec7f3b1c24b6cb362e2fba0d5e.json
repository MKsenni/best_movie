{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __makeTemplateObject, __read, __spreadArray } from \"tslib\";\nimport { safeAttrPrefix } from 'safevalues';\nimport { safeElement } from 'safevalues/dom';\nimport { MDCFoundation } from './foundation';\nfunction toCamelCase(str) {\n  // tslint:disable-next-line:enforce-name-casing\n  return String(str).replace(/\\-([a-z])/g, function (_, match) {\n    return match.toUpperCase();\n  });\n}\n/** MDC Component base */\nvar MDCComponent = /** @class */function () {\n  function MDCComponent(root, foundation) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n      args[_i - 2] = arguments[_i];\n    }\n    this.root = root;\n    this.initialize.apply(this, __spreadArray([], __read(args)));\n    // Note that we initialize foundation here and not within the constructor's\n    // default param so that this.root is defined and can be used within the\n    // foundation class.\n    this.foundation = foundation === undefined ? this.getDefaultFoundation() : foundation;\n    this.foundation.init();\n    this.initialSyncWithDOM();\n  }\n  MDCComponent.attachTo = function (root) {\n    // Subclasses which extend MDCBase should provide an attachTo() method that\n    // takes a root element and returns an instantiated component with its root\n    // set to that element. Also note that in the cases of subclasses, an\n    // explicit foundation class will not have to be passed in; it will simply\n    // be initialized from getDefaultFoundation().\n    return new MDCComponent(root, new MDCFoundation({}));\n  };\n  /* istanbul ignore next: method param only exists for typing purposes; it does\n   * not need to be unit tested */\n  // tslint:disable-next-line:enforce-name-casing\n  MDCComponent.prototype.initialize = function () {\n    var _args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n    // Subclasses can override this to do any additional setup work that would\n    // be considered part of a \"constructor\". Essentially, it is a hook into the\n    // parent constructor before the foundation is initialized. Any additional\n    // arguments besides root and foundation will be passed in here.\n  };\n\n  MDCComponent.prototype.getDefaultFoundation = function () {\n    // Subclasses must override this method to return a properly configured\n    // foundation class for the component.\n    throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');\n  };\n  MDCComponent.prototype.initialSyncWithDOM = function () {\n    // Subclasses should override this method if they need to perform work to\n    // synchronize with a host DOM object. An example of this would be a form\n    // control wrapper that needs to synchronize its internal state to some\n    // property or attribute of the host DOM. Please note: this is *not* the\n    // place to perform DOM reads/writes that would cause layout / paint, as\n    // this is called synchronously from within the constructor.\n  };\n  MDCComponent.prototype.destroy = function () {\n    // Subclasses may implement this method to release any resources /\n    // deregister any listeners they have attached. An example of this might be\n    // deregistering a resize event from the window object.\n    this.foundation.destroy();\n  };\n  MDCComponent.prototype.listen = function (evtType, handler, options) {\n    this.root.addEventListener(evtType, handler, options);\n  };\n  MDCComponent.prototype.unlisten = function (evtType, handler, options) {\n    this.root.removeEventListener(evtType, handler, options);\n  };\n  /**\n   * Fires a cross-browser-compatible custom event from the component root of\n   * the given type, with the given data.\n   */\n  MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {\n    if (shouldBubble === void 0) {\n      shouldBubble = false;\n    }\n    var evt;\n    if (typeof CustomEvent === 'function') {\n      evt = new CustomEvent(evtType, {\n        bubbles: shouldBubble,\n        detail: evtData\n      });\n    } else {\n      evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n    }\n    this.root.dispatchEvent(evt);\n  };\n  /**\n   * This is a intermediate fix to allow components to use safevalues. This\n   * limits setAttribute to setting tabindex, data attributes, and aria\n   * attributes.\n   *\n   * TODO(b/263990206): remove this method and add these directly in each\n   * component. This will remove this abstraction and make it clear that the\n   * caller can't set any attribute.\n   */\n  MDCComponent.prototype.safeSetAttribute = function (element, attribute, value) {\n    if (attribute.toLowerCase() === 'tabindex') {\n      element.tabIndex = Number(value);\n    } else if (attribute.indexOf('data-') === 0) {\n      var dataKey = toCamelCase(attribute.replace(/^data-/, ''));\n      element.dataset[dataKey] = value;\n    } else {\n      safeElement.setPrefixedAttribute([safeAttrPrefix(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"aria-\"], [\"aria-\"]))), safeAttrPrefix(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"role\"], [\"role\"])))], element, attribute, value);\n    }\n  };\n  return MDCComponent;\n}();\nexport { MDCComponent };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCComponent;\nvar templateObject_1, templateObject_2;","map":{"version":3,"names":["__makeTemplateObject","__read","__spreadArray","safeAttrPrefix","safeElement","MDCFoundation","toCamelCase","str","String","replace","_","match","toUpperCase","MDCComponent","root","foundation","args","_i","arguments","length","initialize","apply","undefined","getDefaultFoundation","init","initialSyncWithDOM","attachTo","prototype","_args","Error","destroy","listen","evtType","handler","options","addEventListener","unlisten","removeEventListener","emit","evtData","shouldBubble","evt","CustomEvent","bubbles","detail","document","createEvent","initCustomEvent","dispatchEvent","safeSetAttribute","element","attribute","value","toLowerCase","tabIndex","Number","indexOf","dataKey","dataset","setPrefixedAttribute","templateObject_1","templateObject_2"],"sources":["C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/@material/base/component.js"],"sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __makeTemplateObject, __read, __spreadArray } from \"tslib\";\nimport { safeAttrPrefix } from 'safevalues';\nimport { safeElement } from 'safevalues/dom';\nimport { MDCFoundation } from './foundation';\nfunction toCamelCase(str) {\n    // tslint:disable-next-line:enforce-name-casing\n    return String(str).replace(/\\-([a-z])/g, function (_, match) { return match.toUpperCase(); });\n}\n/** MDC Component base */\nvar MDCComponent = /** @class */ (function () {\n    function MDCComponent(root, foundation) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        this.root = root;\n        this.initialize.apply(this, __spreadArray([], __read(args)));\n        // Note that we initialize foundation here and not within the constructor's\n        // default param so that this.root is defined and can be used within the\n        // foundation class.\n        this.foundation =\n            foundation === undefined ? this.getDefaultFoundation() : foundation;\n        this.foundation.init();\n        this.initialSyncWithDOM();\n    }\n    MDCComponent.attachTo = function (root) {\n        // Subclasses which extend MDCBase should provide an attachTo() method that\n        // takes a root element and returns an instantiated component with its root\n        // set to that element. Also note that in the cases of subclasses, an\n        // explicit foundation class will not have to be passed in; it will simply\n        // be initialized from getDefaultFoundation().\n        return new MDCComponent(root, new MDCFoundation({}));\n    };\n    /* istanbul ignore next: method param only exists for typing purposes; it does\n     * not need to be unit tested */\n    // tslint:disable-next-line:enforce-name-casing\n    MDCComponent.prototype.initialize = function () {\n        var _args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            _args[_i] = arguments[_i];\n        }\n        // Subclasses can override this to do any additional setup work that would\n        // be considered part of a \"constructor\". Essentially, it is a hook into the\n        // parent constructor before the foundation is initialized. Any additional\n        // arguments besides root and foundation will be passed in here.\n    };\n    MDCComponent.prototype.getDefaultFoundation = function () {\n        // Subclasses must override this method to return a properly configured\n        // foundation class for the component.\n        throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +\n            'foundation class');\n    };\n    MDCComponent.prototype.initialSyncWithDOM = function () {\n        // Subclasses should override this method if they need to perform work to\n        // synchronize with a host DOM object. An example of this would be a form\n        // control wrapper that needs to synchronize its internal state to some\n        // property or attribute of the host DOM. Please note: this is *not* the\n        // place to perform DOM reads/writes that would cause layout / paint, as\n        // this is called synchronously from within the constructor.\n    };\n    MDCComponent.prototype.destroy = function () {\n        // Subclasses may implement this method to release any resources /\n        // deregister any listeners they have attached. An example of this might be\n        // deregistering a resize event from the window object.\n        this.foundation.destroy();\n    };\n    MDCComponent.prototype.listen = function (evtType, handler, options) {\n        this.root.addEventListener(evtType, handler, options);\n    };\n    MDCComponent.prototype.unlisten = function (evtType, handler, options) {\n        this.root.removeEventListener(evtType, handler, options);\n    };\n    /**\n     * Fires a cross-browser-compatible custom event from the component root of\n     * the given type, with the given data.\n     */\n    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {\n        if (shouldBubble === void 0) { shouldBubble = false; }\n        var evt;\n        if (typeof CustomEvent === 'function') {\n            evt = new CustomEvent(evtType, {\n                bubbles: shouldBubble,\n                detail: evtData,\n            });\n        }\n        else {\n            evt = document.createEvent('CustomEvent');\n            evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n        }\n        this.root.dispatchEvent(evt);\n    };\n    /**\n     * This is a intermediate fix to allow components to use safevalues. This\n     * limits setAttribute to setting tabindex, data attributes, and aria\n     * attributes.\n     *\n     * TODO(b/263990206): remove this method and add these directly in each\n     * component. This will remove this abstraction and make it clear that the\n     * caller can't set any attribute.\n     */\n    MDCComponent.prototype.safeSetAttribute = function (element, attribute, value) {\n        if (attribute.toLowerCase() === 'tabindex') {\n            element.tabIndex = Number(value);\n        }\n        else if (attribute.indexOf('data-') === 0) {\n            var dataKey = toCamelCase(attribute.replace(/^data-/, ''));\n            element.dataset[dataKey] = value;\n        }\n        else {\n            safeElement.setPrefixedAttribute([safeAttrPrefix(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"aria-\"], [\"aria-\"]))), safeAttrPrefix(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"role\"], [\"role\"])))], element, attribute, value);\n        }\n    };\n    return MDCComponent;\n}());\nexport { MDCComponent };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCComponent;\nvar templateObject_1, templateObject_2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}