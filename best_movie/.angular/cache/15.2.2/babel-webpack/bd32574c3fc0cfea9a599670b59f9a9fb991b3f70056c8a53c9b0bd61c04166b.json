{"ast":null,"code":"import _defineProperty from \"C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/** Class for holding element and attribute policies used for sanitization. */\nexport class SanitizerTable {\n  constructor(allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies) {\n    _defineProperty(this, \"allowedElements\", void 0);\n    _defineProperty(this, \"elementPolicies\", void 0);\n    _defineProperty(this, \"allowedGlobalAttributes\", void 0);\n    _defineProperty(this, \"globalAttributePolicies\", void 0);\n    this.allowedElements = allowedElements;\n    this.elementPolicies = elementPolicies;\n    this.allowedGlobalAttributes = allowedGlobalAttributes;\n    this.globalAttributePolicies = globalAttributePolicies;\n  }\n  isAllowedElement(elementName) {\n    // Note: `HTMLFormElement`s are always dropped, supporting them is very\n    // costly because of the DOM clobberring they can cause. The additional code\n    // size required to properly work around DOM clobberring issues is large and\n    // shouldn't be put on every user of the sanitizer. Thoroughly review\n    // b/210975025 and the CLs linked there before you start allowing form\n    // elements.\n    return elementName.toLowerCase() !== 'form' && (this.allowedElements.has(elementName) || this.elementPolicies.has(elementName));\n  }\n  getAttributePolicy(attributeName, elementName) {\n    const elementPolicy = this.elementPolicies.get(elementName);\n    if (elementPolicy?.has(attributeName)) {\n      return elementPolicy.get(attributeName);\n    }\n    if (this.allowedGlobalAttributes.has(attributeName)) {\n      return {\n        policyAction: AttributePolicyAction.KEEP\n      };\n    }\n    const globalPolicy = this.globalAttributePolicies.get(attributeName);\n    return globalPolicy || {\n      policyAction: AttributePolicyAction.DROP\n    };\n  }\n}\n/**\n * Values derived from\n * https://godoc.corp.google.com/pkg/google3/third_party/safehtml/sanitizer/policy#AttributePolicy\n */\nexport var AttributePolicyAction;\n(function (AttributePolicyAction) {\n  AttributePolicyAction[AttributePolicyAction[\"DROP\"] = 0] = \"DROP\";\n  AttributePolicyAction[AttributePolicyAction[\"KEEP\"] = 1] = \"KEEP\";\n  AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_SANITIZE_URL\"] = 2] = \"KEEP_AND_SANITIZE_URL\";\n  AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_NORMALIZE\"] = 3] = \"KEEP_AND_NORMALIZE\";\n  AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_SANITIZE_STYLE\"] = 4] = \"KEEP_AND_SANITIZE_STYLE\";\n})(AttributePolicyAction || (AttributePolicyAction = {}));","map":{"version":3,"names":["SanitizerTable","constructor","allowedElements","elementPolicies","allowedGlobalAttributes","globalAttributePolicies","isAllowedElement","elementName","toLowerCase","has","getAttributePolicy","attributeName","elementPolicy","get","policyAction","AttributePolicyAction","KEEP","globalPolicy","DROP"],"sources":["C:/Users/Acer/Desktop/best_movie/best_movie/node_modules/safevalues/builders/html_sanitizer/sanitizer_table/sanitizer_table.mjs"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/** Class for holding element and attribute policies used for sanitization. */\nexport class SanitizerTable {\n    allowedElements;\n    elementPolicies;\n    allowedGlobalAttributes;\n    globalAttributePolicies;\n    constructor(allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies) {\n        this.allowedElements = allowedElements;\n        this.elementPolicies = elementPolicies;\n        this.allowedGlobalAttributes = allowedGlobalAttributes;\n        this.globalAttributePolicies = globalAttributePolicies;\n    }\n    isAllowedElement(elementName) {\n        // Note: `HTMLFormElement`s are always dropped, supporting them is very\n        // costly because of the DOM clobberring they can cause. The additional code\n        // size required to properly work around DOM clobberring issues is large and\n        // shouldn't be put on every user of the sanitizer. Thoroughly review\n        // b/210975025 and the CLs linked there before you start allowing form\n        // elements.\n        return elementName.toLowerCase() !== 'form' &&\n            (this.allowedElements.has(elementName) ||\n                this.elementPolicies.has(elementName));\n    }\n    getAttributePolicy(attributeName, elementName) {\n        const elementPolicy = this.elementPolicies.get(elementName);\n        if (elementPolicy?.has(attributeName)) {\n            return elementPolicy.get(attributeName);\n        }\n        if (this.allowedGlobalAttributes.has(attributeName)) {\n            return { policyAction: AttributePolicyAction.KEEP };\n        }\n        const globalPolicy = this.globalAttributePolicies.get(attributeName);\n        return globalPolicy || { policyAction: AttributePolicyAction.DROP };\n    }\n}\n/**\n * Values derived from\n * https://godoc.corp.google.com/pkg/google3/third_party/safehtml/sanitizer/policy#AttributePolicy\n */\nexport var AttributePolicyAction;\n(function (AttributePolicyAction) {\n    AttributePolicyAction[AttributePolicyAction[\"DROP\"] = 0] = \"DROP\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP\"] = 1] = \"KEEP\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_SANITIZE_URL\"] = 2] = \"KEEP_AND_SANITIZE_URL\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_NORMALIZE\"] = 3] = \"KEEP_AND_NORMALIZE\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_SANITIZE_STYLE\"] = 4] = \"KEEP_AND_SANITIZE_STYLE\";\n})(AttributePolicyAction || (AttributePolicyAction = {}));\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,CAAC;EAKxBC,WAAW,CAACC,eAAe,EAAEC,eAAe,EAAEC,uBAAuB,EAAEC,uBAAuB,EAAE;IAAA;IAAA;IAAA;IAAA;IAC5F,IAAI,CAACH,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,uBAAuB,GAAGA,uBAAuB;IACtD,IAAI,CAACC,uBAAuB,GAAGA,uBAAuB;EAC1D;EACAC,gBAAgB,CAACC,WAAW,EAAE;IAC1B;IACA;IACA;IACA;IACA;IACA;IACA,OAAOA,WAAW,CAACC,WAAW,EAAE,KAAK,MAAM,KACtC,IAAI,CAACN,eAAe,CAACO,GAAG,CAACF,WAAW,CAAC,IAClC,IAAI,CAACJ,eAAe,CAACM,GAAG,CAACF,WAAW,CAAC,CAAC;EAClD;EACAG,kBAAkB,CAACC,aAAa,EAAEJ,WAAW,EAAE;IAC3C,MAAMK,aAAa,GAAG,IAAI,CAACT,eAAe,CAACU,GAAG,CAACN,WAAW,CAAC;IAC3D,IAAIK,aAAa,EAAEH,GAAG,CAACE,aAAa,CAAC,EAAE;MACnC,OAAOC,aAAa,CAACC,GAAG,CAACF,aAAa,CAAC;IAC3C;IACA,IAAI,IAAI,CAACP,uBAAuB,CAACK,GAAG,CAACE,aAAa,CAAC,EAAE;MACjD,OAAO;QAAEG,YAAY,EAAEC,qBAAqB,CAACC;MAAK,CAAC;IACvD;IACA,MAAMC,YAAY,GAAG,IAAI,CAACZ,uBAAuB,CAACQ,GAAG,CAACF,aAAa,CAAC;IACpE,OAAOM,YAAY,IAAI;MAAEH,YAAY,EAAEC,qBAAqB,CAACG;IAAK,CAAC;EACvE;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIH,qBAAqB;AAChC,CAAC,UAAUA,qBAAqB,EAAE;EAC9BA,qBAAqB,CAACA,qBAAqB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACjEA,qBAAqB,CAACA,qBAAqB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACjEA,qBAAqB,CAACA,qBAAqB,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,GAAG,uBAAuB;EACnGA,qBAAqB,CAACA,qBAAqB,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,GAAG,oBAAoB;EAC7FA,qBAAqB,CAACA,qBAAqB,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,GAAG,yBAAyB;AAC3G,CAAC,EAAEA,qBAAqB,KAAKA,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}